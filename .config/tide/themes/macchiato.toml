#
# Tide Editor Theme - Catppuccin Macchiato
# Generated based on Catppuccin Macchiato palette and template
#

# Theme Metadata
name = "Catppuccin Macchiato"
is_dark = true

[styles]
# Catppuccin Macchiato Palette (for reference)
# rosewater = "#f4dbd6"
# flamingo = "#f0c6c6"
# pink = "#f5bde6"
# mauve = "#c6a0f6"
# red = "#ed8796"
# maroon = "#ee99a0"
# peach = "#f5a97f"
# yellow = "#eed49f"
# green = "#a6da95"
# teal = "#8bd5ca"
# sky = "#91d7e3"
# sapphire = "#7dc4e4"
# blue = "#8aadf4"
# lavender = "#b7bdf8"
# text = "#cad3f5"
# subtext1 = "#b8c0e0"
# subtext0 = "#a5adcb"
# overlay2 = "#939ab7"
# overlay1 = "#8087a2"
# overlay0 = "#6e738d"
# surface2 = "#5b6078"
# surface1 = "#494d64"
# surface0 = "#363a4f"
# base = "#24273a"
# mantle = "#1e2030"
# crust = "#181926"

#
# -- UI Elements --
#
[styles.Default]
# Base style for all text
fg = "#cad3f5"  # text
bg = "#24273a"  # base

[styles.Selection]
# Text selection highlight (approximated with reverse)
fg = "#24273a"  # base
bg = "#8087a2"  # overlay1
reverse = true

[styles.SearchHighlight]
# Search result highlights
fg = "#1e2030"  # mantle
bg = "#eed49f"  # yellow

[styles.StatusBar]
# Status bar at bottom of screen
fg = "#cad3f5"  # text
bg = "#1e2030"  # mantle (slightly darker than base)

[styles.StatusBarModified]
# Modified indicator in status bar
fg = "#eed49f"  # yellow
bg = "#1e2030"  # mantle

[styles.StatusBarMessage]
# Messages in status bar
fg = "#cad3f5"  # text
bg = "#1e2030"  # mantle
bold = true

[styles.StatusBarFind]
# Find text prefix in status bar
fg = "#a6da95"  # green
bg = "#1e2030"  # mantle
bold = true

#
# -- Basic Syntax Elements --
#
[styles.keyword]
# Keywords (if, else, func, etc)
fg = "#c6a0f6"  # mauve
italic = true # Following JSON hint

[styles.string]
# String literals
fg = "#a6da95"  # green

[styles.comment]
# Comments
fg = "#939ab7"  # overlay2
italic = true

[styles.number]
# Numeric literals
fg = "#f5a97f"  # peach

[styles.type]
# Type names (classes, structs, interfaces, traits, enums)
fg = "#eed49f"  # yellow
italic = true

[styles.function]
# Function names
fg = "#8aadf4"  # blue
italic = true

[styles.constant]
# Constants (true, false, nil, user-defined constants)
fg = "#f5a97f"  # peach

[styles.variable]
# Variable names
fg = "#cad3f5"  # text

[styles.operator]
# Operators (+, -, *, /, etc)
fg = "#8bd5ca"  # teal

[styles.namespace]
# Namespaces, modules, packages
fg = "#eed49f"  # yellow
italic = true

[styles.label]
# Labels for goto statements, etc.
fg = "#8aadf4"  # blue

#
# -- String Variants --
#
[styles.string.import]
# Import path strings
fg = "#a6da95"  # green

[styles.string.escape]
# Escape sequences in strings (\n, \t, etc)
fg = "#f5bde6"  # pink

[styles.string.special]
# Special strings (e.g., rune literals, symbols)
fg = "#ed8796"  # red (using red for symbols as per JSON)

[styles.string.regexp]
# Regular expression literals
fg = "#f5bde6"  # pink

#
# -- Type Variants --
#
[styles.type.builtin]
# Built-in types (int, string, bool)
fg = "#c6a0f6"  # mauve (Matching JSON storage.type.primitive)
italic = true

[styles.type.definition]
# Type definitions (class, struct keywords etc) - Use keyword style
fg = "#c6a0f6"  # mauve
italic = true

#
# -- Function Variants --
#
[styles.function.definition]
# Function definitions (the name itself)
fg = "#8aadf4"  # blue
italic = true

[styles.function.call]
# Function calls
fg = "#8aadf4"  # blue
italic = true

[styles.function.builtin]
# Built-in functions (len, make, etc)
fg = "#f5a97f"  # peach
italic = true

[styles.function.method]
# Method definitions
fg = "#8aadf4"  # blue
italic = true

[styles.function.method.call]
# Method calls
fg = "#8aadf4"  # blue
italic = true

[styles.function.macro]
# Macro invocations (Rust !, C preprocessor)
fg = "#8aadf4"  # blue (Using blue for Rust macros, consistent with functions)

#
# -- Variable Variants --
#
[styles.variable.member]
# Structure/class members
fg = "#cad3f5"  # text

[styles.variable.parameter]
# Function parameters
fg = "#ee99a0"  # maroon
italic = true

[styles.variable.builtin]
# Built-in variables (this, self, etc)
fg = "#ed8796"  # red

#
# -- Punctuation --
#
[styles.punctuation]
# Generic punctuation
fg = "#939ab7"  # overlay2

[styles.punctuation.bracket]
# Brackets (), [], {}
fg = "#939ab7"  # overlay2

[styles.punctuation.delimiter]
# Delimiters (comma, semicolon, etc)
fg = "#939ab7"  # overlay2

[styles.punctuation.special]
# Special punctuation (e.g., template literals ${}, C# $, Rust #)
fg = "#eed49f"  # yellow (Matching C#/Rust attributes)

#
# -- Keyword Variants --
#
[styles.keyword.function]
# Function definition keywords (func, def, fn)
fg = "#c6a0f6"  # mauve
italic = true

[styles.keyword.type]
# Type-related keywords (struct, class, type, interface, enum)
fg = "#eed49f"  # yellow (Matching storage.type)
italic = true

[styles.keyword.operator]
# Keywords that are operators (typeof, instanceof, as, is)
fg = "#c6a0f6"  # mauve
italic = true

[styles.keyword.storage]
# Storage keywords (var, const, let, static, pub)
fg = "#c6a0f6"  # mauve (Using mauve for modifiers)
italic = true

[styles.keyword.import]
# Import/include/use keywords
fg = "#c6a0f6"  # mauve
italic = true

[styles.keyword.control]
# Generic control flow keywords
fg = "#c6a0f6"  # mauve
italic = true # Default italic for keywords

[styles.keyword.control.flow]
# Flow control (break, continue)
fg = "#c6a0f6"  # mauve
bold = true # Make flow control stand out

[styles.keyword.control.return]
# Return statements
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.control.yield]
# Yield statements
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.control.import]
# Import-specific control (from)
fg = "#c6a0f6"  # mauve
italic = true

[styles.keyword.control.exception]
# Exception handling (try, catch, throw, finally)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.control.context]
# Context managers (with in Python)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.control.conditional]
# Conditionals (if, else, switch, match)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.control.repeat]
# Loops (for, while, do, loop)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.control.concurrent]
# Concurrency keywords (go, select, async, await)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.control.defer]
# Deferred execution (defer)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.conditional]
# General conditionals (fallback)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.conditional.ternary]
# Ternary operators (? :) - Treat as operators
fg = "#8bd5ca"  # teal

[styles.keyword.repeat]
# Loop keywords (fallback)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.directive]
# Compiler directives (#include, #define, shebang)
fg = "#eed49f"  # yellow (Matching C++ directives)
# Use pink for shebang if possible via specific rules
# fg = "#f5bde6" # pink (for shebang)

[styles.keyword.modifier]
# Modifiers (public, static, abstract, final, etc)
fg = "#c6a0f6"  # mauve
italic = true

[styles.keyword.coroutine]
# Async/await keywords
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.exception]
# Exception keywords (throw, raise)
fg = "#c6a0f6"  # mauve
bold = true

[styles.keyword.debug]
# Debug-related keywords
fg = "#ed8796"  # red

#
# -- Operator Variants --
#
[styles.operator.logical]
# Logical operators (and, or, not, &&, ||, !)
fg = "#8bd5ca"  # teal

#
# -- Constants & Special Values --
#
[styles.constant.builtin]
# Built-in constants (true, false, nil, null, None)
fg = "#f5a97f"  # peach
italic = true

[styles.boolean]
# Boolean values
fg = "#f5a97f"  # peach
italic = true # JSON uses bold italic, but let's stick to italic for consistency

[styles.number.float]
# Floating point numbers
fg = "#f5a97f"  # peach

[styles.character]
# Character literals ('a')
fg = "#a6da95"  # green (Treat like strings)

[styles.character.special]
# Special characters (escape sequences)
fg = "#f5bde6"  # pink

#
# -- Other Elements --
#
[styles.module]
# Module names
fg = "#eed49f"  # yellow
italic = true

[styles.module.builtin]
# Built-in modules
fg = "#eed49f"  # yellow
italic = true

[styles.constructor]
# Constructor functions/methods
fg = "#8aadf4"  # blue (Treat like functions)
italic = true

[styles.attribute]
# Attributes/decorators (@, #[], etc.)
fg = "#f5a97f"  # peach

[styles.attribute.builtin]
# Built-in attributes
fg = "#f5a97f"  # peach
italic = true

[styles.comment.documentation]
# Documentation comments (///, /** */, etc.)
fg = "#8087a2"  # overlay1 (Slightly lighter than regular comments)
italic = true

#
# -- Legacy/Fallback Styles --
#
# These are included for backward compatibility
# with older highlight queries or simpler highlighters
#
[styles.control]
# Generic control keywords (fallback)
fg = "#c6a0f6"  # mauve
bold = true

[styles.builtin]
# Built-in items (fallback) - Use built-in function color
fg = "#f5a97f"  # peach
italic = true

[styles.import]
# Import paths (fallback)
fg = "#a6da95"  # green

[styles.escape]
# Escape sequences (fallback)
fg = "#f5bde6"  # pink

[styles.repeat]
# Loop constructs (fallback)
fg = "#c6a0f6"  # mauve
bold = true

[styles.conditional]
# Conditionals (fallback)
fg = "#c6a0f6"  # mauve
bold = true

[styles.definition]
# Definitions (fallback) - Use function color
fg = "#8aadf4"  # blue
italic = true

[styles.call]
# Function calls (fallback)
fg = "#8aadf4"  # blue
italic = true

[styles.member]
# Object members (fallback)
fg = "#cad3f5"  # text

